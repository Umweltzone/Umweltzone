import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "com.google.android.gms.strict-version-matcher-plugin"
apply plugin: "com.getkeepsafe.dexcount"

repositories {
    google()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

def versionMajor = 7
def versionMinor = 2
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

def gitSha() {
    def res = "git rev-parse --short HEAD".execute([], project.rootDir).text.trim()

    def diff = "git diff".execute([], project.rootDir).text.trim()
    if (diff != null && diff.length() > 0) {
        res += "-dirty"
    }

    return res
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).configureEach {
            // Verbose Lint output
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

android {
    compileSdk 33
    buildToolsVersion "33.0.2"

    defaultConfig {
        minSdk 19
        targetSdk 33
        versionCode versionMajor * 100000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        multiDexEnabled true
        buildConfigField "String", "BUILD_VERSION", "\"${versionName}\""
        buildConfigField "int", "BUILD_VERSION_CODE", "${versionCode}"
        resValue("string", "build_time", "\"${buildTime()}\"")
        resValue("string", "git_sha", "\"${gitSha()}\"")
        archivesBaseName = "Umweltzone-$versionName"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        String sharedTestDir = "src/sharedTest/java"
        androidTest {
            java.srcDirs += sharedTestDir
            kotlin.srcDirs += sharedTestDir
        }
        test {
            java.srcDirs += sharedTestDir
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            zipAlignEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard.cfg"
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        resources {
            pickFirsts += [
                    'META-INF/LICENSE',
                    'META-INF/LICENSE.txt',
                    'META-INF/NOTICE',
                    'META-INF/NOTICE.txt'
            ]
        }
    }

    lint {
        checkDependencies true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}

tasks.withType(Test).configureEach {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

configurations {
    // http://qathread.blogspot.de/2015/02/discovering-espresso-for-android.html
    testImplementation.exclude group: "com.android.support", module: "support-annotations"
}

dependencies {
    implementation "androidx.multidex:multidex:$multidexVersion"
    implementation "androidx.cardview:cardview:$cardViewVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation "androidx.core:core-ktx:$coreKtxVersion"
    implementation "com.google.android.gms:play-services-base:$playServicesBaseVersion"
    implementation "com.google.android.gms:play-services-maps:$playServicesMapsVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.github.ligi.snackengage:snackengage-playrate:$snackengagePlayrateVersion"
    implementation "de.cketti.library.changelog:ckchangelog:$ckChangelogVersion"
    implementation "info.metadude.android:typed-preferences:$typedPreferencesVersion"
    implementation "info.metadude.kotlin.library.roadsigns:roadsigns:$roadSignsVersion"
    implementation "me.saket:better-link-movement-method:2.2.0"
    implementation "org.parceler:parceler-api:$parcelerVersion"
    kapt "org.parceler:parceler:$parcelerVersion"
    implementation "com.github.ligi:tracedroid:$tracedroidVersion"

    // Integration tests
    androidTestImplementation("com.squareup.assertj:assertj-android:$assertjAndroidVersion") {
        exclude group: "com.android.support", module: "support-annotations"
    }
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$testExtJunitVersion"

    // Unit tests
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.squareup.assertj:assertj-android:$assertjAndroidVersion"
    kaptTest "org.parceler:parceler:$parcelerVersion"
}

Properties props = new Properties()
File gradlePropertiesFile = file("gradle.properties")
if (gradlePropertiesFile.exists()) {
    props.load(new FileInputStream(gradlePropertiesFile))
}

if (project.hasProperty("signing.release.keystoreFilePath")) {
    android.signingConfigs.release.storeFile = file(props["signing.release.keystoreFilePath"])
}
if (project.hasProperty("signing.release.keystorePassword")) {
    android.signingConfigs.release.storePassword = props["signing.release.keystorePassword"]
}
if (project.hasProperty("signing.release.keyAlias")) {
    android.signingConfigs.release.keyAlias = props["signing.release.keyAlias"]
}
if (project.hasProperty("signing.release.keyPassword")) {
    android.signingConfigs.release.keyPassword = props["signing.release.keyPassword"]
}
